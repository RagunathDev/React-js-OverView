                            React js

React is a free and open-source front-end JavaScript library for 
building user interfaces based on components. It is maintained by Meta
and a community of individual developers and companies. React can be used
to develop single-page, mobile, or server-rendered applications with frameworks like Next.js



The latest version of the library, React 18, was released in March 2022



what is library?

In computer programming, a library refers to a collection of files, 
programs, routines, scripts, or functions that can be referenced
in the programming code.






               Node js



Node. js is an open-source, cross-platform JavaScript runtime environment and library for running 
web applications outside the client's browser. 
Ryan Dahl developed it in 2009, and its latest iteration, 
version 15.14, was released in April 2021

There are building fast and scalable server-side and networking applications.
It runs on the V8 JavaScript runtime engine


What is cross-platform devices?

In computing, cross-platform (also multi-platform) refers to different computing platforms
(Windows, iOS, Android, macOS, Linux) or even device types (desktops, mobile).

npm is the default package manager for the JavaScript runtime environment Node.js.
It consists of a command line client, also called npm


npx is used to execute JavaScript packages downloaded this way,NPX stand for Node Package Execute
<!DOCTYPE html>
<html>
  <head>
    <script src="https://unpkg.com/react@18/umd/react.development.js" crossorigin></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" crossorigin></script>
    <script src="https://unpkg.com/. @babel/standalone/babel.min.js"></script>
  </head>
  <body>

    <div id="mydiv"></div>

    <script type="text/babel">
      function Hello() {
        return <h1>Hello World!</h1>;
      }

      const container = document.getElementById('mydiv');
      const root = ReactDOM.createRoot(container);
      root.render(<Hello />)
    </script>

  </body>
</html>




Es 6 - Class


A class is a type of function,
but instead of using the keyword function to initiate it, 
we use the keyword class, 
and the properties are assigned inside a constructor() method.

class Car{
    constructor (name, year){
      this.name = name;
      this.year = year;
      
    }
    display (){
        return `name =${this.name} year =${this.year}`
    }
    age(){
        return new Date().getFullYear() 
        - this.year;
    }
   
}
 const obj1  = new Car("Kia",2019)

console.log(`${obj1.display()} Age=${obj1.age()}`)

                     /  class inheritance/



To create a class inheritance, use the extends keyword.

A class created with a class inheritance inherits all the methods
from another class

class Vehicle {
    constructor (gear, speed){
      this.gear= gear;
      this.speed = speed;
      
    }
    display (){
        return `Total Gears =${this.gear} Speed per km =${this.speed}`
    }
}
    class BMW extends Vehicle {
        constructor (gear,speed,wheels){
            super(gear,speed );
            this.wheels = wheels;
        }
        display2 (){
            return `${super.display()} No of wheels =  ${this.wheels}`
        }
    }
    
    

 const obj1  = new BMW (1,4,2019)

console.log(`${obj1.display2()}`)


The super() method refers to the parent class.

By calling the super() method in the constructor method, 
we call the parent's constructor method and get access to 
the parent's properties and methods.


                                   Destructring

Destructuring is a new feature introduced in ES6 which allows you to easily
extract values from Objects or Arrays and assign to new values or even assign
default values to undefined properties


old way to getting objects 

let  people = {
    
    first : "hlo",
    last : "how"
    
}
let ones = people.first
let twos = people.last

console.log(ones + twos );

Es 6 

let  people = {
    
    first : "hlo",
    last : "kumar"
    
}

const { first ,last } = 

console.log(first)


Rename the variables 
3.
const {first: firstname, last : lastname }= people 


console.log(firstname)


  4. 

let  people = {
    
    first : "hlo",
    last : "how",
    age: 34
}
const {first , ...rest} = people ;

console.log(rest)



5. nested Object destructuring

let  people = {
    id:1,
name:{
    first : "hlo",
    last : "how"
},
    age: 34


}
const { id, name: {first,last}, name } = people ;

console.log(name)
console.log(first)


      Array

old - Es5

const arr = [2,3, 4]

let x = arr[0];
let y = arr[1];
let z = arr[2]

console.log(x)

new - Es6


const arr = [2,3, 4]

const [x,y,z]= arr

console.log(x)



2.

const number= ["https", "you" ,"and", "front" ]

const [x,...y]= number
console.log(y)
React that represents the data that a component can maintain and manage. It allows a component to keep track of information that can change over time and affect the rendering of the component



React components
class components

State

State is a concept in React that represents the data that a component can maintain and manage. 
It allows a component to keep track of information that can change over time and affect the rendering
of the component. 


Class components have the ability to define and manage their own state.


Initialize State: In the constructor of the class component, 

you define the initial state using the this.state property. 

The initial state is an object that holds the data you want to track.

Accessing State: You can access the state data using this.state.propertyName.




Updating State: To update the state, you should never modify the state directly. 
Instead, you use the this.setState() method.

This method takes an object that represents the updated state properties and merges 
them with the existing state.

import React, { Component } from 'react';

class Counter extends Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0, // Initial state
    };
  }

  increment = () => {
    
    this.setState({ count: this.state.count + 1 });
  };

  render() {
    return (
      <div>
        <h1>Counter: {this.state.count}</h1>
        <button onClick={this.increment}>Increment</button>
      </div>
    );
  }
}

export default Counter;



vyhj b ugg b BB


import React from 'react';
import ChildComponent from './ChildComponent';

function ParentComponent() {
  const colors = ['red', 'green', 'blue'];

  return <ChildComponent colors={colors} />;
}


import React from 'react';

function ChildComponent(props) {
  return (
    <div>
      <h2>Colors List</h2>
      <ul>
        {props.colors.map((color, index) => (
          <li key={index}>{color}</li>
        ))}
      </ul>
    </div>
  );
}


import React, { Component } from 'react';

class SimpleForm extends Component {
  constructor(props) {
    super(props);
    this.state = {
      inputValue: ''
    };
  }

  handleInputChange = event => {
    this.setState({
      inputValue: event.target.value
    });
  };

  render() {
    return (
      <div>
        <h2>Simple Form</h2>
        <input
          type="text"
          value={this.state.inputValue}
          onChange={this.handleInputChange}
        />
        <p>Input Value: {this.state.inputValue}</p>
      </div>
    );
  }
}

class App extends Component {
  render() {
    return (
      <div>
        <h1>Simple Form Example</h1>
        <SimpleForm />
      </div>
    );
  }
}

export default App;







import React, { Component } from 'react';

class TodoList extends Component {
  constructor(props) {
    super(props);
    this.state = {
      todos: [],
      newTodo: ''
    };
  }

  addTodo = () => {
    const { todos, newTodo } = this.state;
    if (newTodo.trim() !== '') {
      this.setState({
        todos: [...todos, newTodo],
        newTodo: ''
      });
    }
  };

  handleInputChange = event => {
    this.setState({
      newTodo: event.target.value
    });
  };

  render() {
    const { todos, newTodo } = this.state;
    return (
      <div>
        <h2>Todo List</h2>
        <ul>
          {todos.map((todo, index) => (
            <li key={index}>{todo}</li>
          ))}
        </ul>
        <input type="text" value={newTodo} onChange={this.handleInputChange} />
        <button onClick={this.addTodo}>Add Todo</button>
      </div>
    );
  }
}

class App extends Component {
  render() {
    return (
      <div>
        <h1>Todo List Example</h1>
        <TodoList />
      </div>
    );
  }
}

export default App;


import React, { useState } from 'react';

function Child() {
  const [todos, setTodos] = useState([]);
  const [newTodo, setNewTodo] = useState('');
  const [editIndex, setEditIndex] = useState(-1);
  const [editedTodo, setEditedTodo] = useState('');

  const addTodo = () => {
    if (newTodo.trim() !== '') {
      setTodos([...todos, newTodo]);
      setNewTodo('');
    }
  };

  const handleDelete = (index) => {
    const updatedTodos = todos.filter((_, i) => i !== index);
    setTodos(updatedTodos);
  };

  const handleEditSave = (index) => {
    const updatedTodos = todos.map((todo, i) =>
      i === index ? editedTodo : todo
    );
    setTodos(updatedTodos);
    setEditIndex(-1);
    setEditedTodo('');
  };

  const editItem = (index) => {
    setEditIndex(index);
    setEditedTodo(todos[index]);
  };

  return (
    <div>
      <h2 style={{ color: 'yellow', fontSize: 20 }}>Todo List</h2>
      <input
        type="text"
        value={newTodo}
        onChange={(e) => setNewTodo(e.target.value)}
      />
      <button onClick={addTodo}>Add Todo</button>
      <ul>
        {todos.map((todo, index) => (
          <li key={index}>
            {editIndex === index ? (
              <>
                <input
                  type="text"
                  value={editedTodo}
                  onChange={(e) => setEditedTodo(e.target.value)}
                />
                <button onClick={() => handleEditSave(index)}>Save</button>
              </>
            ) : (
              <>
                {todo}
                <button onClick={() => handleDelete(index)}>Delete</button>
                <button onClick={() => editItem(index)}>Edit</button>
              </>
            )}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default Child;

                                                            React Hooks
Hooks were added to React in version 16.8.

Hooks allow function components to have access to state and other React features. Because of this, class components are generally no longer needed.

Although Hooks generally replace class components, there are no plans to remove classes from React.

Hook Rules
There are 3 rules for hooks:

Hooks can only be called inside React function components.
Hooks can only be called at the top level of a component.
Hooks cannot be conditional
Note: Hooks will not work in React class components.


React useContext Hook


React Context
React Context is a way to manage state globally.

It can be used together with the useState Hook to share state between deeply nested components more easily than with useState alone.






