                            React js

React is a free and open-source front-end JavaScript library for 
building user interfaces based on components. It is maintained by Meta
and a community of individual developers and companies. React can be used
to develop single-page, mobile, or server-rendered applications with frameworks like Next.js.


installe relase:  29 May 2013

auther : Jorden Walke 



The latest version of the library, React 18, was released in March 2022



what is library?

In computer programming, a library refers to a collection of files, 
programs, routines, scripts, or functions that can be referenced
in the programming code.






               Node js



Node. js is an open-source, cross-platform JavaScript runtime environment and library for running 
web applications outside the client's browser. 
Ryan Dahl developed it in 2009, and its latest iteration, 
version 15.14, was released in April 2021

There are building fast and scalable server-side and networking applications.
It runs on the V8 JavaScript runtime engine


What is cross-platform devices?

In computing, cross-platform (also multi-platform) refers to different computing platforms
(Windows, iOS, Android, macOS, Linux) or even device types (desktops, mobile).

npm is the default package manager for the JavaScript runtime environment Node.js.
It consists of a command line client, also called npm


npx is used to execute JavaScript packages downloaded this way,NPX stand for Node Package Execute
<!DOCTYPE html>
<html>
  <head>
    <script src="https://unpkg.com/react@18/umd/react.development.js" crossorigin></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" crossorigin></script>
    <script src="https://unpkg.com/. @babel/standalone/babel.min.js"></script>
  </head>
  <body>

    <div id="mydiv"></div>

    <script type="text/babel">
      function Hello() {
        return <h1>Hello World!</h1>;
      }

      const container = document.getElementById('mydiv');
      const root = ReactDOM.createRoot(container);
      root.render(<Hello />)
    </script>

  </body>
</html>




Es 6 - Class


A class is a type of function,
but instead of using the keyword function to initiate it, 
we use the keyword class, 
and the properties are assigned inside a constructor() method.

class Car{
    constructor (name, year){
      this.name = name;
      this.year = year;
      
    }
    display (){
        return `name =${this.name} year =${this.year}`
    }
    age(){
        return new Date().getFullYear() 
        - this.year;
    }
   
}
 const obj1  = new Car("Kia",2019)

console.log(`${obj1.display()} Age=${obj1.age()}`)

                     /  class inheritance/



To create a class inheritance, use the extends keyword.

A class created with a class inheritance inherits all the methods
from another class

class Vehicle {
    constructor (gear, speed){
      this.gear= gear;
      this.speed = speed;
      
    }
    display (){
        return `Total Gears =${this.gear} Speed per km =${this.speed}`
    }
}
    class BMW extends Vehicle {
        constructor (gear,speed,wheels){
            super(gear,speed );
            this.wheels = wheels;
        }
        display2 (){
            return `${super.display()} No of wheels =  ${this.wheels}`
        }
    }
    
    

 const obj1  = new BMW (1,4,2019)

console.log(`${obj1.display2()}`)


The super() method refers to the parent class.

By calling the super() method in the constructor method, 
we call the parent's constructor method and get access to 
the parent's properties and methods.


                                   Destructring

Destructuring is a new feature introduced in ES6 which allows you to easily
extract values from Objects or Arrays and assign to new values or even assign
default values to undefined properties


old way to getting objects 

let  people = {
    
    first : "hlo",
    last : "how"
    
}
let ones = people.first
let twos = people.last

console.log(ones + twos );

Es 6 

let  people = {
    
    first : "hlo",
    last : "kumar"
    
}

const { first ,last } = 

console.log(first)


Rename the variables 
3.
const {first: firstname, last : lastname }= people 


console.log(firstname)


  4. 

let  people = {
    
    first : "hlo",
    last : "how",
    age: 34
}
const {first , ...rest} = people ;

console.log(rest)



5. nested Object destructuring

let  people = {
    id:1,
name:{
    first : "hlo",
    last : "how"
},
    age: 34


}
const { id, name: {first,last}, name } = people ;

console.log(name)
console.log(first)


      Array

old - Es5

const arr = [2,3, 4]

let x = arr[0];
let y = arr[1];
let z = arr[2]

console.log(x)

new - Es6


const arr = [2,3, 4]

const [x,y,z]= arr

console.log(x)



2.

const number= ["https", "you" ,"and", "front" ]

const [x,...y]= number
console.log(y)



